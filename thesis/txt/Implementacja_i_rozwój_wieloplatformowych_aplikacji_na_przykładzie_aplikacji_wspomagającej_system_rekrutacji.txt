Implementacja i rozwój wieloplatformowych aplikacji na przykładzie aplikacji wspomagającej system rekrutacji
dr inż. Adrian Kapczyński



Dawid Bitner27525033,33 
Rozwój aplikacji od strony aplikacji przeglądarkowej (część kliencka).

Wspomaganie budowy zaplecza systemu aplikacji, implementacja zabezpieczeń (część serwerowa).
	
Daniel Broczkowski27525433,33
Rozwój oraz nadzorowanie prac projektu od strony aplikacji przeglądarkowej (część
kliencka).

Wspomaganie budowy zaplecza systemu aplikacji (część serwerowa).

Mateusz Kowol27528233,33	
Rozwój oraz nadzorowanie prac projektu od strony aplikacji mobilnej (część kliencka).

Wspomaganie budowy zaplecza systemu aplikacji (część serwerowa).
	
	


Wszystkim ludziom branży IT i nie tylko,
 którzy oferują swoją bezinteresowną pomoc w sieci
 oraz społeczności open source.

Wstęp

Jednym z wymogów ukończenia studiów przez zespół projektowy było odbycie trzymiesięcznej praktyki zawodowej. W związku z tym członkowie grupy odbyli wiele rozmów kwalifikacyjnych i na ich podstawie nabyli pewne doświadczenia. Jako że sam okres stażu na studiach wiąże się z pisaniem pracy inżynierskiej, pomysł na aplikację wspierającą system rekrutacyjny, zasugerowany przez promotora pracy dyplomowej, idealnie trafił w warsztat umiejętności, jak i gusta zespołu. 

Motywacja do wyboru tematu
Główną motywacją do stworzenia serwisu była zauważalna luka na rynku oprogramowania rekrutacyjnego. Nieznaczna liczba aplikacji umożliwia bezpośrednie przypisywanie testów dla poszczególnych użytkowników, stąd też decyzja o obraniu takiego kierunku. Dzięki temu, że kody są unikalne, istnieje teoretyczna możliwość stworzenia niepowtarzalnych testów bądź różniących się od siebie w taki sposób,
 by wykluczyć możliwość „ściągania” odpowiedzi od innych użytkowników, którzy przystąpili wcześniej do podobnego testu. Daje to szansę indywidualnego podejścia do każdego kandydata. Dodatkowym celem projektu, było przedstawienie zwinnego rozwoju oprogramowania, z wykorzystaniem znanych narzędzi, wspomagających ten proces. Projekt jest swoistą laboratoryjną symulacją rozwoju aplikacji w warunkach komercyjnych. Posiada wymagany temat, termin, podział na role, zarządzanie projektem, kontrolę wersji oraz podział na rozgałęzienia projektu
 w repozytorium.

Cel pracy

Celem pracy inżynierskiej jest opracowanie założeń oraz implementacja z wykorzystaniem znanych wzorców, bibliotek i języków programowania, wieloplatformowego rozwiązania informatycznego wspomagającego rekrutację. Projekt przedstawia informacje o sposobie budowania systemu informatycznego, który z założenia powinien być skalowalny i modularny, aby poszczególne zespoły programistyczne mogły pracować nad rozwojem aplikacji w sposób równoległy, co posiada odwzorowanie
 w projektach komercyjnych.



Wspomaganie rekrutacji poprzez systemy informatyczne
Ostatnie lata przyniosły wiele zmian w procesach rekrutacyjnych, zarówno na stanowiska najniższego szczebla, jak i kierownicze. Dla zwiększenia wydajności, kolejne przedsiębiorstwa starają się usprawnić przebieg zatrudnienia potencjalnych kandydatów, stosując coraz to nowsze sposoby wyboru przyszłych pracowników.
 W tym przypadku, bardzo dużą popularnością cieszy się Internet, za pośrednictwem którego przeprowadzane są wstępne wybory kandydatur, rozmowy rekrutacyjne, czy nawet końcowe etapy rekrutacji, wraz z zawarciem umowy o pracę.

Wiele podmiotów gospodarczych posiada swoje predefiniowane platformy do prowadzenia i rejestrowania przebiegu rekrutacji nowych pracobiorców – co z punktu widzenia kandydata może być kwestią uciążliwą, ponieważ często takie rozwiązania dla danej firmy wymagają założenia w niej konta. Biorąc pod uwagę fakt, że osoba poszukująca pracy zazwyczaj nie aplikuje na stanowisko do jednego konkretnego zakładu pracy, a na ogół robi to mniej lub bardziej masowo, to zagadnienie staje się bardziej problematyczne(P. Zdziech, „«Nie kupuj Pan cegły», czyli dla kogo platforma do rekrutacji”, https://erecruiter.pl/blog/dla-kogo-platforma-do-rekrutacji/, (dostęp 21.11.2020)).
W każdym z systemów potencjalnego pracodawcy, należy posiadać osobny profil, a co za tym idzie - hasło, które – ze względów bezpieczeństwa – powinno być unikalne w każdym z serwisów. Ma to na celu uchronić nas przed włamaniami do innych platform, gdzie używamy współdzielonych(W. Earp, „Why sharing passwords is a bad idea”, 
https://swgfl.org.uk/magazine/why-sharing-passwords-is-a-bad-idea/,(dostęp 21.11.2020))
(Materiały firmy SolarWinds, „Top Seven Reasons Why You Should Not Share Your Passwords”, 
https://logicalread.com/top-seven-reasons-why-you-should-not-share-your-passwords, (dostęp 21.11.2020))
(Materiały firmy SUNY Broome, „Top reasons why you shouldn’t share your username and password”, https://news.sunybroome.edu/focus/top-reasons-why-you-shouldnt-share-your-username-and-password/, (dostęp 21.11.2020)) danych logowania. Nieautoryzowane przejęcie konta przez osoby trzecie, grozi wyciekiem większej ilości danych osobowych, za których wykorzystaniem stoją najczęściej nieuczciwe intencje.

Dodatkowo hasło należy odpowiednio zabezpieczyć, co oznacza, że nie powinno składać się ze słów dostępnych w słowniku, naszych danych personalnych, dat urodzenia członków rodziny itp. Takie elementy narażają użytkownika na włamanie do konta np. poprzez socjotechniki bądź znajomość naszej osoby. W powszechnie uznanych zasadach, przyjmuje się, że silne hasło powinno składać się z niezrozumiałego dla osób trzecich ciągu znaków, cyfr, symboli specjalnych oraz powinno uwzględniać wielkie i małe litery – zabezpiecza to użytkownika przed włamaniami z wykorzystaniem metod słownikowych. Kod dostępu nie powinien być zbyt krótki – najlepiej, aby posiadał minimum 8 znaków. Minimalizuje to możliwość jego złamania poprzez ataki typu brute force. Dobrą praktyką jest również korzystanie z generatorów haseł, należy jednak upewnić się, że wygenerowane hasło nie zostaje zapisane na serwerach – co otwiera włamywaczowi furtkę do ataku metodą słownikową(Materiały Massachusetts Institute of Technology, „Strong Passwords”, 
http://kb.mit.edu/confluence/display/istcontrib/Strong+Passwords, (dostęp 21.11.2020))
(Materiały spółki CIS, „Do Not Share Your Password”, 
https://www.cisecurity.org/daily-tip/do-not-share-your-password/, (dostęp 21.11.2020)). Przykładowe hasło, niespełniające wymagań bezpieczeństwa:

    
        Gliwice123!
    Przykładowe hasło, spełniające wymogi bezpieczeństwa:

    
        GEFjx8oai
    
Istniejące rozwiązania na rynku

  [JOBVITE] - jest platformą rekrutacyjną w postaci oprogramowania jako usługi (ang. software as a service, w skrócie SaaS). Serwis internetowy umożliwia klientom tworzenie zaproszeń do pracy, skierowanych do współpracowników i pracowników, w celu złożenia im przykładowo: propozycji awansu. Jobvite integruje się również z serwisami społecznościowymi, takimi jak Facebook
 lub LinkedIn. Dzięki temu jest korzystnym dostawcą rekrutacji społecznościowej dla firm, z możliwością publikowania ofert pracy i zarządzania procesem rekrutacji. Wśród klientów platformy możemy znaleźć takie podmioty jak Schneider Electric, czy Gamesys. System daje możliwość przeglądania statystyk, które  dotyczą np. kliknięć w wysłane zaproszenia, jak również gromadzi informacje o kandydatach.   Więcej informacji: https://www.jobvite.com/
  [Recruitee] - oprogramowanie, które działa jako system śledzenia kandydatów na poszczególne stanowiska. Obejmuje system edycji witryn karier dla marki pracodawcy, wtyczkę do pozyskiwania personelu, integrację ze stroną internetową, która dotyczy zatrudnienia; synchronizację poczty elektronicznej i kalendarza. Obecnymi klientami są m.in.: Vice, Usabilla i Vlisco. Pracownicy działów zarządzania zasobami ludzkimi mogą dostosować proces rekrutacji na każdą posadę. Użytkownicy mają możliwość przeciągania i upuszczania profili kandydatów na różnych etapach rekrutacji, za pomocą systemu przeciągnij i upuść (ang. drag and drop) – takie rozwiązania możemy zauważyć w systemie zarządzania projektem Jira, w postaci tablicy Agile, która umożliwia zarządzanie przepływem pracy w projektach np.: programistycznych.   Więcej informacji: https://recruitee.com/
  [Accenture Careers] - wewnętrzny system korporacji Accenture, który wykorzystywany jest do procesów rekrutacyjnych w tymże przedsiębiorstwie. System umożliwia podgląd obecnego statusu kandydata podczas naboru, jak również informacje o terminach i etapach związanych z rekrutacją.   Więcej informacji: https://www.accenture.com/pl-pl/careers

Rozwiązanie zaproponowane w projekcie inżynierskim
Aplikacja, zrealizowana dla potrzeb projektu inżynierskiegio, umożliwia rejestrację użytkowników, nadawanie im uprawnień dyrektora generalnego firmy (CEO User), uprawnień pracowników działów zarządzania zasobami ludzkimi (HR User). Członkowie działów HR posiadają uprawnienia, by tworzyć nowe ogłoszenia oraz testy, na które z kolei kandydaci, ubiegający się o pożądane stanowisko, mogą aplikować. Po pozytywnym rozpatrzeniu profilu kandydata na podstawie jego danych
 z życiorysu (łac. curriculum vitae), rekruter może przypisać użytkownikowi test, który może rozwiązać. Informacje o nowych zgłoszeniach do testu, jak i o nowych przypisanych testach, są przekazywane użytkownikom działu HR i kandydatom
 w formie mailowej, jak również w postaci powiadomienia na stronie internetowej. Serwis wszystkie swoje możliwości oferuje w części webowej. Aplikacja mobilna oferuje zaś podstawowe funkcjonalności, takie jak: rozwiązywanie testów rekrutacyjnych, obsługę konta i ogłoszeń pracy.

Pomysł na rozwiązanie problemu
W celu realizacji postawionego zadania, wykorzystane zostały popularne środowiska, biblioteki oraz języki predefiniowane do rozwiązań serwerowych i aplikacyjnych od strony serwisu mobilnego i przeglądarkowego.

W realizacji zadania wykorzystana została baza danych PostgreSQL, której to przewagą nad konkurencyjnym rozwiązaniem w postaci MySQL jest ustawienie indeksowania, które pozwala na wyraźnie szybsze oraz bardziej wydajne przeszukiwanie bazy, która wraz z rozwojem aplikacji, zaczyna nabierać rozmiarów i posiada coraz to więcej rekordów. Warto również zaznaczyć, że bazy MySQL w najnowszych wersjach nie są do końca zgodne ze standardem SQL. PostgreSQL oferuje wysokie prędkości odczytu oraz zapisu, dzięki czemu bardzo dobrze nadaje się do dużych, rozrastających się i skomplikowanych baz danych. PostgreSQL to obiektowo-relacyjna baza danych, w której można korzystać z takich abstrakcji, jak dziedziczenie, czy przeciążenie funkcji. Mogą one okazać się bardzo pomocnymi opcjami w większych bazach(K. Hristozov, „MySQL vs PostgreSQL - Choose the Right Database for Your Project”, https://developer.okta.com/blog/2019/07/19/mysql-vs-postgres, (dostęp 21.11.2020)).

Serwer obsługiwany jest przez technologię Java Spring Boot, która zazwyczaj wykorzystywana jest w dużych, komercyjnych projektach, ponieważ jest szeroko znana, stabilna oraz pozwala na skalowalność aplikacji. W Springu istnieje wiele modułów, które są wykorzystywane do pracy z np.: chmurami obliczeniowymi, bazami danych
 i mikroserwisami. Dobrze współpracuje z kontenerami Tomcat Catalina, dzięki czemu aplikację można z łatwością przenosić na środowiska produkcyjne(Materiały spółki VMware, „Spring Framework Documentation” https://docs.spring.io/spring-framework/docs/5.1.0.RELEASE/spring-framework-reference/, (dostęp 21.11.2020)).

W rozwoju aplikacji przeglądarkowej wykorzystana została struktura programistyczna (ang. framework) Angular, który pozwala na modułową (stworzoną
 z serwisów, modułów, komponentów i fabryk) budowę stosunkowo łatwo skalowalnej aplikacji. Wykorzystywana technologia Single Page Application (SPA)(M. Wojciechowski, „Aplikacje SPA, Angular, TypeScript”,http://www.cs.put.poznan.pl/mwojciechowski/cdv/ria/Angular.pdf, (dostęp 21.11.2020)) pozwala na przeładowywanie elementów strony, bez jej całkowitego przebudowania, co daje poczucie poruszania się jak po aplikacji desktopowej. Przykładem takiego rozwiązania może być Google Gmail – gdzie po otrzymaniu wiadomości strona nie jest przeładowywana, tylko aktualizowana jest zawartość dwóch komponentów – listy odebranych wiadomości i licznika.
Dodatkową zaletą Angular jest pisanie aplikacji w języku TypeScript, który jest nadzbiorem języka JavaScript. Umożliwia programować obiektowo w prosty sposób, a także zapewnia statyczne typowanie. Każdy kod zapisany w JavaScript jest poprawnym programem TypeScript – z racji bycia jego podzbiorem(Materiały firmy Microsoft, „TypeScript Documentation”,https://www.typescriptlang.org/docs/, (dostęp 21.11.2020)).


        Przykład SPA w Gmail. Źródło: Opracowanie własne.
    
Aplikacja mobilna została stworzona z użyciem platformy programistycznej Flutter, która korzysta z języka Dart. Pozytywną cechą tego rozwiązania jest natywność stworzonej aplikacji. Część kodu można napisać za pomocą odpowiednich metod kanałowych (ang. channel methods) np.: w Kotlinie lub Swiftcie – dzięki czemu aplikacja może doskonale współgrać zarówno z systemem Android jak i iOS. Poprzez wykorzystanie jednego silnika renderowania, framework tworzy dwie natywne aplikacje na oba środowiska – zaoszczędza to czas programiście, ponieważ wystarczy,
 że stworzy jeden kod. Zaletą jest także tzw. Hotreload(Materiały firmy Google, „Flutter documentation”,https://flutter.dev/docs, (dostęp 21.11.2020)), który umożliwia wprowadzanie zmian w działającej aplikacji bez konieczności jej całkowitego przeładowywania – wystarczy, że zostanie odświeżony zmodyfikowany komponent. Dzięki temu można ujrzeć zmiany w aplikacji już po chwili.


Ogólne informacje dotyczące rekrutacji
Rekrutacja to główny element procesu zarządzania zasobami ludzkimi, najczęściej o charakterze sformalizowanym. Ma za zadanie zachęcić jak największe grono potencjalnych kandydatów do współpracy z pracodawcą. Rozumiana w ten sposób rekrutacja, prowadzi do selekcji petentów, która jest kolejnym etapem procesu wdrożenia nowych pracowników do firmy. Pracodawcy coraz częściej stosują przeróżne techniki, mające za zadanie odsiać ochotników, niespełniających wymogów, np. poprzez wstępne testy, jeszcze zanim przejdzie się do etapu bezpośredniej rozmowy kwalifikacyjnej, na której to z kolei coraz częściej sprawdzane są kompetencje miękkie kandydatów. Wraz z postępem techniki, przedsiębiorstwa czy też agencje specjalizujące się w przeprowadzaniu procesów rekrutacyjnych, wykorzystują do tego internet i rozmowy telefoniczne. Często podczas takiej konwersacji sprawdzana jest np.: ogólna znajomość języka obcego kandydata. Natomiast internet wykorzystywany jest do przeprowadzania rekrutacji bezpośredniej – aplikacji na konkretne stanowisko, wysłania życiorysu, wypełnienia wstępnych testów kompetencji, czy też sprawdzania znajomości potrzebnych zagadnień(A. Sulich, „Modele i techniki rekrutacji i selekcji realizowane przez przedsiębiorstwa w województwie dolnośląskim", [w:] Nurty badawcze w zarządzaniu, Wydawnictwo GSP, Zgorzelec 2015).

Taka forma procesu selekcji jest coraz częściej spotykana. Zdalne techniki przeprowadzania procesów rekrutacyjnych przybrały na znaczeniu w dobie pandemii COVID-19, gdzie wiele firm przeszło na rekrutację zdalną kandydatów. Obecnie jest to jedyna, a zarazem najlepsza możliwa opcja, która realnie ogranicza kontakty międzyludzkie i minimalizuje ryzyko zakażeniem wirusem SARS-CoV-2(Materiały firmy Grant Thornton, „Rekrutacja i selekcja nie tylko w czasach SARS-CoV-2 - Purporowy informator", https://grantthornton.pl/wp-content/uploads/2020/06/Covid-rekrutacja-i-selekcja/GrantThornton/16062020.pdf, (dostęp 22.11.2020)).
Wiąże się to z faktem przejścia przez przedsiębiorstwa w pewnym stopniu, lub często
 w całości (w zależności od możliwości), na tryb pracy zdalnej.

Rodzaje rekrutacji
Biorąc pod uwagę środowisko, w jakim poszukuje się nowych kandydatów, można wyznaczyć dwie główne kategorie:

rekrutację wewnętrzną – potencjalnymi kandydatami na stanowisko są obecni pracownicy firmy, czyli objęcie posady poprzez awans,
rekrutację zewnętrzną – potencjalnymi kandydatami na stanowisko są osoby spoza firmy.

Biorąc zaś pod uwagę rozmiar rynku pracy, w jakim prowadzi się poszukiwania, można także wyznaczyć dwie główne kategorie:

rekrutację wąską – jak sama nazwa wskazuje, grono osób poszukiwanych na dane stanowisko jest wąskie. Wynika to z tego, że poszukiwani są eksperci
 w określonej dziedzinie. Nie może to być osoba bez doświadczenia, wymaga się od takiej persony najwyższych standardów, które są w stanie zapewnić jedynie nieliczni,
rekrutację szeroką – tutaj grono osób poszukiwanych na dane stanowisko jest szerokie. Zazwyczaj poszukuje się masowo nowych pracowników najniższego szczebla. W tym przypadku często nie wymaga się doświadczenia zawodowego, ani wysokich kompetencji, przez co liczba odbiorców jest stosunkowo duża.

Etapy rekrutacji
Na proces rekrutacji składają się najczęściej poniższe etapy(S. Adam, „Modele i techniki rekrutacji i selekcji realizowane przez przedsiębiorstwa w województwie dolnośląskim", [w:] Nurty badawcze w zarządzaniu., Wydawnictwo GSP, Zgorzelec 2015): 


[Określenie profilu kandydata na podstawie opisu stanowiska pracy] – jest to proces przygotowywania ogłoszenia oferty pracy. Proces ten uważany jest za bardzo ważny, ponieważ to od niego zależy, jacy kandydaci będą aplikować na oferowane stanowisko. Dlatego przeprowadzany jest bardzo dokładnie, gdyż należy starannie przeanalizować, a następnie jasno określić, kto i o jakich kompetencjach jest potrzebny w organizacji.
[Tworzenie i zamieszczanie ogłoszeń o stanowisku] – etap polega na doborze odpowiednich mediów, w zależności od rodzaju rekrutacji (szeroka albo wąska). Ogłoszenie powinno zawierać: opis i zakres wymagań, które są stawiane potencjalnym pracownikom; proponowane formy świadczeń i wynagrodzenie, jakie oferuje pracodawca zatrudnionej osobie.
[Tworzenie długiej listy kandydatów] – preselekcja. Spośród otrzymanych aplikacji osób, które odpowiedziały na ogłoszenie i spełniają podstawowe wymagania stawiane kandydatom, odrzuca się ochotników, którzy całkowicie nie nadają się na ogłoszony wolny wakat.
[Tworzenie krótkiej listy kandydatów] – selekcja osób, które najpełniej spełniają określone wymagania oferty pracy.
[Zastosowanie technik naboru kandydatów wobec wybranych osób] – najczęściej w tym momencie ustala się czas i sposób przeprowadzania rozmowy kwalifikacyjnej. Należy również upewnić się, że dany kandydat nadal jest zainteresowany oferowanym stanowiskiem w organizacji.
[Sprawdzenie referencji] – często wieloetapowe. Zdarza się, że wstępna rozmowa kwalifikacyjna jest przeprowadzana z pracownikiem działu zarządzania zasobami ludzkimi, natomiast kolejne z osobami na stanowiskach kierowniczych bądź pracującymi na podobnym stanowisku.
[Podjęcie decyzji o zatrudnieniu nowego pracownika] – poinformowanie potencjalnego pracownika o pozytywnym albo negatywnym przejściu procesu rekrutacyjnego.
[Negocjacje dotyczące warunków zawarcia stosunku o pracę] – jego formy, wynagrodzenia i innych świadczeń. Najczęściej na dane stanowisko są określane przedziały płacowe. Podczas tego etapu przeprowadzane są również negocjacje konkretnej kwoty z tego zakresu.

Techniki i narzędzia rekrutacyjne

[Rozmowa kwalifikacyjna] (wywiad indywidualny) – właściwy etap, w którym organizacja szukająca pracownika ma bezpośredni kontakt z petentem. Podczas rozmowy kwalifikacyjnej pracodawca ustala, czy kandydat jest odpowiednią osobą na stanowisko oraz jaki dodatni wkład może wnieść do firmy(L. Kulczycka, „Jak najlepiej zaprezentować się podczas rozmowy kwalifikacyjnej", Wydawnictwo Wolters Kluwer Polska SA, Warszawa 2013).
[Ośrodek oceny] (ang. Assessment center) – wielowymiarowy proces oceny kompetencji. Do najczęstszych przykładów wykorzystania należą: selekcja i rekrutacja pracowników (zarówno wewnętrzna, jak i zewnętrzna), audyt personalny, działania rozwojowe, a także planowanie kariery i doradztwo.
[Testy wiedzy lub kompetencji] – mogą przybierać przeróżne formy, np. testu jednokrotnego wyboru czy z pytaniami otwartymi. Coraz częściej, we wstępnych etapach rekrutacji, testy kompetencji przeprowadzane są z zastosowaniem metod oceny umiejętności kandydata na odległość.
[Testy psychometryczne] – ustandaryzowany i zobiektywizowany pomiar próbki zachowania. Pozwala na zbadanie postępowania osoby badanej w sytuacji testowej, co pozwala wywnioskować, jakie działania podejmie kandydat w sytuacjach pozatestowych. W rekrutacji na stanowiska ryzykowne, tj.: kierowca zawodowy czy pracownik służb mundurowych, takie sprawdziany są spotykane dużo częściej, a wręcz uważane są za pewną normę.
[Studium przypadku] – (ang. case study) – polega na teoretycznym wykonaniu zadania przez kandydata, najczęściej w określonym czasie. Studium przypadku ma na celu wykazanie, że kandydat posiada umiejętności, o których wspomniał w swoim życiorysie, i że potrafi wykonać je w odpowiednim okresie. Zadania w studium przypadku najczęściej rozpoczynają się od słów: zastosuj, oblicz, przygotuj, narysuj, przeanalizuj itp.
[Referencje] – zadaniem rekrutera jest sprawdzenie autentyczności referencji posiadanych przez kandydata. Najczęściej wymagane jest przedłożenie dowodów na swoje umiejętności, w postaci uprawnień, dyplomów ukończonych kursów, czy świadectw pracy. Mają one na celu uwiarygodnić przebieg dotychczasowej kariery.
[Wywiady ustrukturyzowane] – polegają na zadawaniu pytań, które wcześniej zostały przygotowane przez rekrutującego pracownika i zostają zadane zgodnie ze wcześniej ustaloną kolejnością. Zaletą takiego typu wywiadu jest to,
 że rekruter otrzyma oczekiwane informacje od kandydata (wywiad prowadzony w luźniejszej konwencji tego nie gwarantuje). Główną wadą wywiadu ustrukturyzowanego jest fakt, że selekcjoner może pominąć istotne kwestie lub nie dowie się o umiejętnościach, które kandydat posiada, a o które nie został zapytany.
[Wywiady panelowe]  –  to część rozmowy kwalifikacyjnej, w której kandydat odpowiada na pytania grupy osób, które następnie podejmują decyzję o zatrudnieniu. Zatrudniający menedżerowie korzystają z wywiadów panelowych, aby uzyskać spójny obraz kandydata oraz otrzymać natychmiastową opinię od pozostałych członków zespołu(J. Conway, R. A. Jako, D. F. DeLong, „A meta-analysis of interrater and internal consistency reliability of selection interviews", Artykuł z „Journal of Applied Psychology", 1995). Wywiady panelowe zmniejszają ryzyko zatrudniania niewłaściwej osoby. Celem panelu jest podjęcie możliwie najlepszej decyzji o zatrudnieniu, biorąc pod uwagę dostępne informacje o stanowisku
 i kandydatach.
[Dyskusje grupowe] – mają na celu konfrontację kandydata z osobami zatrudnionymi na podobnym stanowisku bądź z kierownictwem. Często są częścią wywiadów panelowych.


Spojrzenie na problem rekrutacji w tekstach kultury

Dla wielu osób proces rekrutacji jest bardzo stresującym przeżyciem. Kandydaci chcą wypaść dobrze podczas rozmowy kwalifikacyjnej, przedstawić się z jak najlepszej strony. Pracodawca stara się jak najlepiej zbadać potencjalnego pracownika pod kątem jego mocnych i słabych stron. To wszystko sprawia, że u petenta rośnie niepewność. Może on obawiać się o to, czy jego kompetencje są wystarczające. Ludzie, działając pod wpływem stresu, mogą zapominać podstawowych informacji, związanych ze swoją osobą; dziedziną, w której pracują, czy udzielać błędnych odpowiedzi na pytania, na które tak naprawdę znają odpowiedź. Dodatkowo, poza stresem, sam proces rekrutacyjny może być bardzo długi i składać się z wielu etapów. Osoba, które pracuje na regularnym etacie z pewnością nie miałaby większych trudności z wyżej wymienionymi problemami. Sytuacja może być zgoła odmienna
 w przypadku osoby aktualnie bezrobotnej, która przykładowo nie posiada płynności finansowej, jest uzależniona od rodziny, posiada zaciągnięty kredyt lub osoby, która dopiero co wkracza na rynek pracy(„Stressful experience, brain, and emotions: Developmental, genetic, and hormonal influences", McEwen (1995)). Rozmowa kwalifikacyjna jest na pewno stresującą sytuacją w życiu. Na temat przebiegu rekrutacji istnieje wiele mitów, które zostały zobrazowane w różnych tekstach kultury(„Filmy dla rekrutera", Katarzyna Rojewska https://nofluffjobs.com/blog/filmy-dla-rekrutera/ (dostęp 23.11.2020)):

Test – film reżyserii Stuarta Hazeldine'a jest opowieścią o ósemce śmiałków, przystępujących do ostatniego etapu rekrutacji w bardzo tajemniczej korporacji. Każdy z kandydatów otrzymuje jedno pytanie oraz trzy reguły, których nie może złamać. Na udzielenie odpowiedzi każdy z ochotników ma nie mniej i nie więcej niż godzinę i dwadzieścia minut. Bohaterom bardzo zależy na wygranej. Powoduje to, że w pewnym momencie przestają nad sobą panować i zaczynają zachowywać się nieludzko, agresywnie. W pewnym momencie sytuacja zaczyna wymykać się spod kontroli i już nie przypomina standardowej rekrutacji. Film w dosadny sposób opisuje tzw. „wyścig szczurów” i pogoń za pieniędzmi, która w obecnych czasach potrafi przyćmić prawdziwy obraz rzeczywistości.

Metoda - film autorstwa Marcelo Piñeyro. Historia przedstawia rywalizację siedmiu kandydatów, ubiegających się o stanowisko międzynarodowego kierownika
 w jednej z korporacji. Wybrany zostanie tylko jeden spośród nich. Każdy z ochotników reprezentuje inny rodzaj osobowości. Atmosfera panująca podczas procesu rekrutacyjnego zaczyna wzbudzać w uczestnikach niepewność i wywołuje paranoję. Grupa poddawana jest serii prób i testów psychologicznych, których zadaniem jest eliminacja i wybór tylko jednego – najlepszego kandydata.

Przepisy prawne stosowane podczas rekrutacji
Proces rekrutacyjny wiąże się z pozyskiwaniem przez potencjalnego pracodawcę danych osobowych, zawartych w dokumentach kandydata, wyrażającego chęć podjęcia zatrudnienia. Należy podkreślić, że pracodawca nie może żądać od petenta danych, które nie są potrzebne do przeprowadzenia rekrutacji, jak np.: stan cywilny, czy orientacja seksualna. Dane osobowe nie mogą być zbierane przez administratora bez powodu zgodnego z prawem, a mogą wyłącznie wtedy, kiedy są niezbędne do realizacji tego celu, jakim jest proces rekrutacji. Podsumowując - administrator danych osobowych podczas rekrutacji nie może zbierać informacji, które nie są przydatne w procesie rekrutacyjnym(Rozporządzenie Parlamentu Europejskiego i Rady (UE) 2016/679 z dnia 27 kwietnia 2016 r. w sprawie ochrony osób fizycznych w związku z przetwarzaniem danych osobowych i w sprawie swobodnego przepływu takich danych oraz uchylenia dyrektywy 95/46/WE (ogólne rozporządzenie o ochronie danych)) (Rozporządzenie Ministra Rodziny, Pracy i Polityki Społecznej z dnia 10 grudnia 2018 r. w sprawie dokumentacji pracowniczej (Dz. U. poz. 2369)), chyba że kandydat zrobi to dobrowolnie i za specjalnym oświadczeniem – nawet w takiej sytuacji, dodatkowe informacje podane przez kandydata nie mogą wpływać na przebieg rekrutacji (np.: kobieta, nieplanująca posiadania potomstwa, nie może stać na uprzywilejowanej pozycji w stosunku do kandydatki, która ma zamiar w najbliższym czasie zajść w ciążę – pomimo tego, że pracodawca może widzieć w tym korzyści, jak np. dostępność pracownika, czy brak konieczności wypłacania świadczenia podczas urlopu macierzyńskiego). Przyszły pracodawca może jednak żądać przedłożenia dodatkowych, określonych prawem dokumentów czy kwalifikacji, jeśli wynika to z konkretnego charakteru pracy. Takim dokumentem jest np. zaświadczenie o niekaralności - u kandydata do służb mundurowych czy pracownika sądu, prawa jazdy odpowiedniej kategorii u kierowcy, czy uprawnień do obsługi konkretnej maszyny u operatora.
Przyszły pracodawca nie ma prawa żądać od kandydata informacji o toczących się i niezakończonych postępowaniach karnych oraz o ich obecnym przebiegu. Dane tego typu nie mieszczą się bowiem w katalogu informacji możliwych do przetwarzania w procesie rekrutacji, gdyż pomimo prawnej możliwości żądania informacji o karalności w określonych przypadkach, postępowanie karne nie musi doprowadzić do prawomocnego skazania danej osoby.

Zgodnie z art. 221 § 1 Kodeksu pracy(Ustawa z dnia 26 czerwca 1974 r.- Kodeks Pracy (Dz. U. z 2019 r. poz. 1040, 1043 i 1495)), pracodawca może żądać od kandydata do pracy podania danych osobowych, które obejmują poniższe informacje:


imię (imiona i nazwisko),
datę urodzenia,
dane kontaktowe wskazane przez kandydata,
wykształcenie,
kwalifikacje zawodowe,
przebieg dotychczasowego zatrudnienia.


Prowadzenie dokumentacji pracowniczej (po zatrudnieniu) odbywa się na podstawie odrębnych przepisów prawa pracy. Rozporządzenie Ministra Rodziny Pracy i Polityki Społecznej z 10 grudnia 2018 r. określa zakres oraz sposób prowadzenia i przechowywania akt pracowników. Nie można zatem mówić o dobrowolności podczas przetwarzania danych o zatrudnionych pracownikach, ponieważ ta kwestia jest regulowana przez powyższe rozporządzenie.

Pracodawca musi mieć na uwadze możliwość wycieku danych osobowych oraz musi stosować środki zapobiegawcze, jak np. przetrzymywanie informacji w systemach elektronicznych o nienagannym poziomie zabezpieczeń i autoryzacji, czy zabezpieczonego fizycznego archiwum. W przypadku wycieku danych, pracodawca musi niezwłocznie (w przeciągu 72 godzin od momentu wykrycia incydentu) poinformować osoby, których dane zostały wykradzione. Dodatkowo musi zgłosić ten fakt do odpowiedniego organu nadzorczego – wskazuje na to Art. 33 RODO. Również na pracowniku, który zauważy wyciek, ciąży powinność niezwłocznego poinformowania o tym pracodawcy.

Podsumowując, rekrutacja to bardzo trudny i złożony proces, do którego różne przedsiębiorstwa podchodzą w zindywidualizowany sposób, dodatkowo pod uwagę muszą być brane często kwestie prawne, związane zarówno z kodeksem karnym, jak i RODO. Sam proces rekrutacji bywa stresującym przeżyciem dla kandydatów, z tego też powodu jest to częsty motyw w przeróżnych tekstach kultury np. produkcjach filmowych. Brak tutaj standardu, który zapewniałby klarowność tego procesu od samego początku. Wieloplatformowa aplikacja, która wspierałaby przeprowadzanie wspomnianego procesu, z pewnością byłaby bardzo przydatna w wielu średnich firmach, jak i korporacjach. Przyczyniłaby się także do redukcji kosztów, związanych z prowadzeniem działalności gospodarczej, poprzez zmniejszenie nakładu czasowego potrzebnego na przeprowadzanie procesu rekrutacji.


Założenia projektowe
W rozdziale zostały omówione w zwięzły sposób początkowe założenia, dotyczące realizacji projektu inżynierskiego. Po wstępnej analizie problemu, zostały sporządzone założenia wyjściowe, które dotyczą poszczególnych części serwisu.

Wstępne założenia dotyczące serwera i bazy danych
Podczas rozważania założeń dotyczących części zaplecza aplikacji, zostały wyszczególnione następujące punkty, które projekt powinien spełniać:

kod aplikacji powinien działać stabilnie, szybko i sprawnie (najlepiej skorzystać z popularnego i rozwijanego frameworku, co zapewni dodatkowo dużą bazę wsparcia technicznego),
odporność na skomplikowane zapytania,
szybkość odpowiedzi dla dużych ilości informacji,
serwer i baza powinny być łatwe w rozbudowaniu,
wsparcie dla wzorców projektowych (np. Model View Controller),
operacje głównie na obiektach,
łatwość konfiguracji,
tworzenie tabel i zależności w bazie danych na poziomie kodu programu,
wsparcie dla modułów bezpieczeństwa.
Na podstawie powyższych wymagań, jako środowisko dla backendu zostało wybrane połączenie bazy danych PostgreSQL oraz serwera Spring. Baza danych PGSQL jest uznawana w środowisku programistycznym za najlepsze rozwiązanie od strony baz danych dla aplikacji, która ma potencjał się rozrastać. Spring natomiast jest technologią, która na rynku jest od osiemnastu lat i nadal jest rozwijana, posiada wsparcie oraz uznawana jest za bezpieczną.

Następnie zostały wykonane szkice bazy danych, które determinują również budowę aplikacji serwerowej.

Według wstępnych założeń, w bazie danych powinny znaleźć się następujące tabele:


    accounttypes (rodzaje kont) w relacji jeden do wielu, z tabelą users,
    answers (odpowiedzi) – zawierająca możliwe odpowiedzi na konkretne pytania, w relacji jeden do wielu z tabelą  questions,
    ceos (właściciele firm) – zawierająca informację o właścicielach firm, w relacji jeden do jednego z tabelą users, oraz wiele do jednego z tabelą companies – jako założyciele,
    companies (firmy) – zawierająca informacje o firmach, takie jak np. adres, czy nazwę,
    companypictures (zdjęcia firmy) – przeznaczona do przetrzymywania informacji o multimediach, dotyczących firmy, takich jak zdjęcia budynku, czy logo. W kolumnie o typie tekstowym, przetrzymywana będzie część odnośnika do serwera FTP, w ten sposób większość zawartości bazy danych nie będzie zapełniona przez dane typu blob, a w celu fizycznego przetrzymywania plików na dysku, zostanie wykorzystany serwer FTP,
    hruser (użytkownicy działu zarządzania zasobami ludzkimi) – powiązania
 z tabelą companies w relacji wiele do jednego oraz z tabelą users w relacji jeden do jednego,
    questions (pytania) – zawierająca treści pytań do poszczególnych testów,
 w relacji wiele do jednego z tabelą tests,
    testparticipant (przypisanie do testu) – zawierająca informacje o przypisanych kodach do testów dla poszczególnych użytkowników, aktualny numer pytania, na którym jest użytkownik, czas rozpoczęcia oraz zakończenia testu. W relacji wiele do jednego z tabelą tests, wiele do jednego z tabelą users,
    tests (testy) – zawierająca informacje o poszczególnych testach, utworzonych przez pracowników: czy test jest aktywny, czy jest możliwość cofania pytań,
 w relacji wiele do jeden z tabelą companies,
    useranswers (odpowiedzi użytkowników) – zapisują się w niej informacje
  o udzielonych odpowiedziach. W relacji wiele do jednego lub jeden do jednego z tabelą questions - zależne od dalszych ustaleń, wiele do jednego z tabelą tests oraz wiele do jednego z tabelą users,
    users (użytkownicy) – zawierająca informacje o zarejestrowanych użytkownikach, hasła użytkowników zaszyfrowane są przez bcrypt.

Natomiast podstawowe punkty końcowe powinny umożliwiać:

    logowanie oraz rejestrację użytkowników,
    dodawanie ogłoszeń przez pracowników firmy,
    dodawanie pracowników do firmy przez właściciela,
    tworzenie oraz rozwiązywanie testów,
    tworzenie oraz aplikowanie na ogłoszenia.

Wstępne założenia dotyczące aplikacji webowej
Przy omawianiu założeń dotyczących aplikacji, zespół brał pod uwagę takie wymagania, jak:

    dostępność źródeł i pomocy dla programisty,
    aktualność platformy programistycznej,
    modułowość,
    responsywność,
    możliwość obiektowego tworzenia aplikacji, zagnieżdżania komponentów,
    prosta obsługa nagłówków (w tym „doczepianie” informacji o tokenie).

W trakcie analizy podjęto decyzję o wyborze środowiska programistycznego Angular, który wykorzystuje język TypeScript, ponieważ doskonale spełnia on nakreślone wcześniej wymagania. Posiada bardzo przystępny sposób tworzenia komponentów, jest ciągle rozwijany, a także - dzięki Node Package Module - posiada dostęp do wielu bezpłatnych bibliotek, pomagających rozwijać aplikację. Dodatkowo zespół posiada w nim największe doświadczenie, spośród wszystkich popularnych frameworków frontendowych.

Zespół w trakcie burzy mózgów zdecydował o tym, co powinna oferować aplikacja przeglądarkowa. Do tych wymagań należą:

    logowanie i rejestracja użytkowników,
    uwierzytelnienie na podstawie tokenu,
    rozróżnienie i dostosowanie interfejsu na podstawie rodzaju konta (administrator, zwykły użytkownik, pracownik działu zarządzania zasobami ludzkimi, przedstawiciel firmy),
    możliwość przeglądania listy ogłoszeń,
    aplikacja przygotowana w minimum dwóch językach (polskim i angielskim),
    możliwość tworzenia testów rekrutacyjnych przed pracowników firmy,
    możliwość dodania firmy,
    możliwość rozwiązywania testów rekrutacyjnych.

Wstępne założenia dotyczące aplikacji mobilnej
Zespół postawił na framework Flutter, korzystający z języka Dart. Czynniki, które o tym zadecydowały, to m.in.: 

    tworzenie aplikacji na dwa systemy (iOS i Android) równolegle,
    prostota budowy aplikacji,
    technologia o dużym wsparciu społeczności.

Aplikacja mobilna jest mniej rozbudowaną wersją tej przygotowanej na przeglądarkę, powinna umożliwiać takie działania jak:

    logowanie i rejestracja zwykłego użytkownika,
    powiadomienia o przypisanych testach,
    możliwość rozwiązywania testu.
Wszystkie wymienione w tym rozdziale założenia nie są założeniami końcowymi, w trakcie rozwoju aplikacji mogły ulec zmianie – zostać zmodyfikowane, usunięte lub też mogły pojawić się nowe.

Metodyka
Rozdział ten przedstawia kolejne trzy fazy realizacji, które zostały wyszczególnione podczas tworzenia projektu inżynierskiego.
Faza planowania
Najważniejszym, a zarazem najbardziej oczywistym punktem, był wybór tematyki pracy. Po ustaleniu tej kwestii, nastąpiła faza planowania. 

Dla łatwiejszego zobrazowania problemu, został sporządzony prosty szablon aplikacji webowej oraz mobilnej. Dzięki temu łatwiej było określić, jakie komponenty należy powołać do życia oraz jakie punkty końcowe trzeba stworzyć do ich obsługi. 
Po spisaniu wstępnych zadań, nastała pora na ich podział pomiędzy członków projektowych oraz śledzenie postępów. Pozostał jeszcze wybór narzędzia do monitorowania efektów. Rozważane były dwie opcje, należące do firmy Atlassian. Pierwszym
 z nich było Trello – aplikacja online do tworzenia list w stylu Kanban. Jest to propozycja sprawdzona przy mniejszych projektach i sprawuje się relatywnie dobrze, jednak przegrała ona z drugim kandydatem – Jira. Zarówno jedno, jak i drugie oprogramowanie pozwala na generowanie zadań, dzielenie ich na dowolne sekcje, przypisywanie wykonawców, ustalanie terminów oraz ustawianie statusów przebiegu realizacji. Trello nie zostało wybrane przez członków zespołu z kilku przyczyn. Pierwszą
 z nich było to, że darmowa wersja jego rywala posiadała wtyczkę, dzięki której można synchronizować system kontroli wersji Git wraz z tablicą. Wystarczy tylko, że nazwy zatwierdzeń zaczynają się od identyfikatora zadania. Wtedy w systemie zapisywane
 są informacje o kolejnych rozgałęzieniach i zatwierdzeniach zmian dla wybranego zadania. Dzięki temu można w prosty sposób sprawdzić z poziomu Jiry postęp prac, bez potrzeby manualnego doszukiwania się aktualizacji kodu. Kolejną przyczyną była chęć nauki czegoś, co jest realnie wykorzystywane przy dużych projektach w świecie biznesu. Co za tym idzie, można podnieść zarówno swoje kompetencje, jak i samą pracę inżynierską na wyższy poziom standardów. Ostatecznym punktem, który zadecydował o porażce Trello, był fakt, że nie pozwala ono na rejestrowanie czasu poświęconego na realizację zadania. Dzięki tej funkcjonalności można
 z łatwością stwierdzić, które zagadnienia sprawiają najwięcej problemów i gdzie przydałaby się pomoc innego członka projektu.

Ostatnim punktem, a zarazem najbardziej oczywistym, było zaadresowanie kwestii systemu kontroli wersji. Wybór dość szybko padł na platformę GitHub, głównie ze względu na jej znajomość i niezawodność. Pomimo tego, że chyba nie ma na świecie programisty, który by choć raz nie skorzystał z tego oprogramowania 
 i większość uznaje je za coś oczywistego, to nie można pomniejszać jego roli, którą odegrało w pracy. Rozwiązanie to stanowi swoisty szkielet całego projektu i bez niego nie byłoby szans na ukończenie kodu w zadanym terminie.
Wczesna faza implementacji
Pierwszym implementacyjnym krokiem projektu było powołanie do życia strony serwero–bazodanowej. Następną rzeczą, którą należało zrobić, było przetestowanie stworzonego zaplecza. W tym celu użyto oprogramowanie Postman. W skrócie, pozwala ono na generowanie i wysyłanie zapytań do API (ang. application programming interface) oraz wyświetlanie zwracanych odpowiedzi. Po upewnieniu się,
 że podstawowe punkty końcowe działają, nastała faza implementacji aplikacji internetowej. Połączenie frontendu z backendem nie przysporzyło większych problemów
 i wszystko zadziałało tak, jak powinno. Zostały utworzone podstawowe panele
 i komponenty, które, choć puste, były bardzo ważne, bo to właśnie one uwidaczniały, jak wiele pracy jeszcze przed zespołem. Na tym etapie został utworzony szkielet aplikacji, wokół którego można było budować resztę ciała. Część mobilna dostała niższy priorytet i została przeznaczona na dalsze etapy rozwoju.
Zaawansowana faza implementacji
Mając gotową bazę, pozostało uzupełniać ją o funkcjonalności. W pierwszej kolejności należało obrać za cel konkretny komponent aplikacji. Następnie w pełnym składzie dokładnie przedyskutowano zasadę jego działania. Po omówieniu wszystkich za i przeciw, utworzono odpowiednie punkty końcowe w części serwerowej,
 a następnie obsłużono je po stronie aplikacji internetowej. Jeśli wszystko zadziałało zgodnie z planem, to cały ten proces powtarzany był od nowa, a jeśli nie, to należało dojść do tego, dlaczego założenia się nie sprawdziły i zmienić je na właściwe.
Faza stabilizacji
Faza stabilizacji nastała po tym, gdy wszystkie planowane funkcjonalności zostały oprogramowane. To właśnie wtedy przyszedł czas na wyszukiwanie i zwalczanie wszelkich błędów w kodzie i niepożądanych zachowań aplikacji. Poza szlifowaniem działania serwisu, należało przyjąć wspólne założenia, co do finalnego stylu programu przeglądarkowego i mobilnego. Tak, aby były one w miarę możliwości jednolite, co do szaty graficznej oraz designu.

Poza pracami nad kodem, zostały także rozpoczęte intensywne prace nad dokumentacją, którą - według ustaleń - należało skończyć do połowy grudnia. Termin ten został wybrany tak, aby mieć odpowiedni bufor czasowy na wszelkie poprawki i niespodziewane problemy, o których warto byłoby wspomnieć.

Podczas prac nad projektem można było zauważyć i wyróżnić kilka faz, w których projekt się znajdował. Były nimi: 

    faza planowania - podczas której zespół stworzył pierwsze szkice projektu,
    wczesna faza implementacji - gdzie zespół wprowadził podstawowy model bazy danych;
    zaawansowana faza implementacji - skupiająca się przede wszystkim na funkcjonalnościach części klienckiej i punktach końcowych części serwerowej,
    faza stabilizacji - czyli ostatnie poprawki i testowanie projektu.
Podzielenie pracy na tego typu etapy sprawiło, że aplikacja nie była pisana chaotycznie, a każdy z członków zespołu łatwiej odnajdywał się w swoich zadaniach i wiedział, w jakim tempie posuwają się prace
 w perspektywie pozostałego czasu.

Technologie
Rozdział ten został poświęcony opisom technologii, które zostały wykorzystane podczas tworzenia projektu inżynierskiego.

Serwer i baza danych
Głównymi technologiami, użytymi w tworzeniu zaplecza serwisu, były m.in. PostgreSQL oraz SpringBoot.

PostgreSQL
Jest to otwarty (ang. open source), obiektowo–relacyjny system zarządzania bazami danych. W okresie ponad trzydziestu lat zyskał na reputacji dzięki swojej wydajności, niezawodności, spójności danych i ich poprawności. Poza jego charakterystyką, ważne jest także to, że projekt ten jest rozwijany przez ochotników z całego świata, przez co jest bezpłatny.

Więcej informacji: https://www.postgresql.org/
SpringBoot
Wydajne i proste narzędzie, ułatwiające tworzenie aplikacji opartych o mikroserwisy w Javie. Dzięki niemu programiści nie muszą, między innym, zajmować się zachowaniem prawidłowych zależności pomiędzy dodawanymi bibliotekami, przez co unika się problemu niekompatybilności między nimi podczas konfigurowania API. Odchodzi również wymóg posiadania zewnętrznego serwera, na który trzeba by było wgrywać aplikację, a później weryfikować jej poprawność. Wszystko to przekłada się na bardziej efektywne pisanie kodu, oszczędność czasu i łatwość obsługi.

Głównymi zaletami SpringBoota są:

    budowanie samodzielnej aplikacji (ang. stand-alone application za pomocą tak zwanych starterów, czyli zbioru wszystkich niezbędnych konfiguracji oraz bibliotek,
    brak wymogu konfiguracji XML (ang. Extensible Markup Language),
    wbudowany serwer i inne niezbędne zależności i komponenty, potrzebne do uruchomienia aplikacji.

Więcej informacji: https://spring.io/projects/spring-boot
Spring Security
Potężna i wysoce konfigurowalna struktura (ang. framework), wykorzystywana do uwierzytelniania i kontroli dostępu. Jest uznawana jako standard przy zabezpieczeniu aplikacji, bazujących na Springu. Jej główną zaletą jest łatwość w użyciu oraz rozwoju, którego należy dokonać, aby sprostać wymaganiom projektowym.
Spring Data JPA
JPA (ang. Java Persistence API) to w skrócie specyfikacja, która określa mechanizmy, pozwalające na zarządzanie zawartością bazy danych poprzez obiekty
 w Javie. Spring Data JPA pozwala na używanie zapytań natywnych, które często możliwościami przewyższają zapytania wbudowane i własne. Dzięki niej można wprowadzić między innymi do adnotacji @Querry standardowe zapytanie SQL
 i operować nim na tabelach, zamiast na encjach. 

Oczywiście dobrodziejstwa, płynące z korzystania z tej technologii, są o wiele większe, ale w tym projekcie była użyta głównie dla powyższych zastosowań.

Więcej informacji: https://spring.io/projects/spring-data-jpa
Aplikacja webowa
Podczas budowy i rozwoju aplikacji dostępnej z poziomu przeglądarki, zespół wykorzystał technologię Angular, która to wykorzystuje w swojej implementacji język TypeScript.

Angular
To otwarta platforma i framework, rozwijany przez Google, służący do tworzenia mobilnych i desktopowych aplikacji internetowych. Dzięki niemu oszczędza się dużo czasu, gdyż nie trzeba rozwijać oprogramowania na różne platformy. Dodatkowymi zaletami są na pewno prędkość działania, niezawodność i ogrom wtyczek do popularnych środowisk programistycznych, ułatwiających pracę z kodem. 

Więcej informacji: https://angular.io/
MDBootstrap
Material Design for Bootstrap to jednen z najpopularniejszych frameworków, współpracujących z Angularem. Udostępnia ona zestaw elementów interfejsu użytkownika (ang. user interface), które są stworzone z myślą o responsywności, czyli wykorzystaniu ich na urządzeniach mobilnych. Największą zaletą tego rozwiązania jest to, że jest darmowe do użytku własnego i komercyjnego oraz to, że korzysta
 z Google Material Design.

Więcej informacji: https://mdbootstrap.com/
Aplikacja mobilna
Zespół, w ramach implementacji systemu na urządzeniach mobilnych, postawił na technologię Flutter, wykorzystującą język Dart.

Flutter
Otwarty (ang. open source) zestaw deweloperski oprogramowania interfejsu użytkownika (ang. user interface). Służy do budowania aplikacji internetowych, na takie systemy, jak: Android, iOS, Linux, Mac, Windows oraz Google Fuchsia. Aplikację, na każdy z tych systemów, można stworzyć z jednego kodu źródłowego.

Więcej informacji: https://flutter.dev/

W powyższym rozdziale zostały omówione technologie użyte przez zespół w implementacji projektu. Są nimi głównie platformy programistyczne, takie jak Flutter, Angular czy SpringBoot. Pierwsza z nich to technologia, która pozwala użytkownikowi na pisanie aplikacji zarówno na mobilny system operacyjny Android, jak i iOS. To, jak i dynamiczny rozwój platformy oraz ciekawe podejście do samego budowania widoków, sprawiło, że grupa projektowa zdecydowała się na wybranie tej technologii. Angular został użyty w aplikacji webowej, bowiem doskonale sprawdza się on w budowaniu wielokomponentowych aplikacji. Dodatkowo dobra znajomość tej technologii przez jednego z członków zespołu sprawiła, że był to doskonały wybór, ponieważ potrafił on pokierować pracami nad częścią przeglądarkową aplikacji. Pewne doświadczenie w języku Java nakierowało zespół na zastosowanie platformy programistycznej Spring,
 co okazało się dobrą decyzją, gdyż wszelkie wbudowane ułatwienia znacząco przyspieszyły prace nad projektem. Technologia ta również znakomicie współgra z bazą danych PostgreSQL.

Narzędzia
Projekt nie zostałby zrealizowany bez użycia niezbędnych narzędzi wspomagających, które to - w mniejszym bądź większym stopniu - przyczyniły się do komfortu pisania, testowania, wyglądu aplikacji, czy nawet komunikacji między poszczególnymi członkami zespołu.

System kontroli wersji
System kontroli wersji (ang. VCS - version control system), pozwala programistom w przyjemny i użyteczny sposób sprawdzać aktualny stan projektu, śledzić zmiany, które zostały wprowadzone na przestrzeni wielu miesięcy lub w przypadku błędów najnowszej wersji - powrotu do wcześniejszego wydania. Każda osoba, która jest członkiem zespołu prowadzącego prace nad danym zleceniem, ma dostęp do repozytorium, które to zawiera wszystkie ww. dane i opcje. 


        Widok programu GitBash. Źródło: Opracowanie własne.
    Nieodłączną częścią życia programisty, jest stałe pisanie nowego kodu. Jednak, biorąc pod uwagę to, że że nikt nie jest doskonały, może się zdarzyć, że ten pominie jakiś ważny aspekt, który miał zostać zaimplementowany. Problemy pojawiają się częściej, gdy programistą jest osoba na stanowisku młodszego dewelopera (ang. Junior  Developer). Osoby niedoświadczone mogą produkować znacznie więcej błędów, które to muszą zostać sprawdzone przez bardziej doświadczonych programistów.
 Te wszystkie problemy sprawiają, że nie można od razu wprowadzić nowych zmian do wersji użytkowej. Rozwiązaniem są gałęzie (ang. branch). Za ich pomocą można skopiować główną wersję aplikacji i, nie naruszając głównej gałęzi, ulepszać kod. Następnie, gdy już dane zadanie zostało zakończone, należy wykonać tzw. pull request. Funkcja ta pozwala na wdrożenie zaaplikowanych zmian do głównej gałęzi projektu.

W projekcie został użyty GitHub, czyli hosting, wykorzystujący system kontroli wersji Git. Natomiast, jako program wspomagający wszelkiego rodzaju czynności, został użyty GitBash, jak i wbudowane opcje pomocnicze w środowiskach programistycznych, opisanych w dalszej części pracy.


        Widok platformy GitHub. Źródło: Opracowanie własne.
    
Oprogramowanie do zarządzania projektem
Podczas wykonywania danego projektu, niezbędną rzeczą jest przypisywanie poszczególnym członkom zespołu odpowiednich zadań. Wprowadza to jasny podział obowiązków w zespole.


        Główny widok Jira. Źródło: Opracowanie własne.
    
Dzięki systemowi Jira, każdy z członków zespołu wie, jakie zadania zostały mu przydzielone oraz ile czasu ma na ich wykonanie. System ten pozwala na kontrolę przepływu pracy w projekcie, członkowie mają wgląd do informacji o tym, jakie zadania są aktualnie wykonywane, jakie zostały zamknięte oraz jakie czekają
 w kolejce.


        Jira - Szczegóły zadania pobranego z wtyczki GitHub. Źródło: Opracowanie własne.
    


        Jira - Tablica Agile. Źródło: Opracowanie własne.
    
Jak widać Jira to zaawansowane narzędzie, dzięki któremu zyskujemy pełną kontrolę nad realizacją zadań projektowych.


        Jira - Wygląd przykładowego zadania. Źródło: Opracowanie własne.
    


        Jira - Szczegóły przykładowego zadania. Źródło: Opracowanie własne.
    
Dzięki zakładce zatwierdzenia można w przyjazny dla użytkownika sposób,
 w formie listy, podejrzeć zatwierdzone postępy w realizacji danego zadania.


        Jira - Wygląd raportu z użyciem wtyczki Team Raports, odnośnie przepracowanego czasu nad zadaniami. Źródło: Opracowanie własne.
    

Jira to łatwy sposób na kontrolę czasu poświęconego na zadania. Z tabeli na rysunku  można na przykład wywnioskować, że zadanie PI-16 było najbardziej skomplikowanym i wymagało dużo uwagi od zespołu projektowego.


        Jira - Wygląd raportu w skróconej wersji. Źródło: Opracowanie własne.
    


        Jira - raport przepracowanych godzin. Źródło: Opracowanie własne.
    
Środowiska programistyczne
InteliJ
InteliJ jest środowiskiem programistycznym, stworzonym przez producenta o nazwie JetBrains w 2001 roku. Jest doskonałym narzędziem, wspomagającym pisanie w języku Java, najchętniej wybieranym przez programistów, którzy są zorientowani właśnie na tą gałąź programowania. Licencje dzielą się na dwie wersje. Wersja pod nazwą Communnity jest bezpłatna i różni się od płatnej wersji Ultimate tym, że nie oferuje większego wsparcia dla takich struktur, jak Spring, JavaEE czy Hibernate(Informacje licencyjne firmy Jet Brains, 
https://www.jetbrains.com/idea/buy/ommercial?billing=yearly (dostęp 11.12.2020)).


        Środowisko programistyczne InteliJ. Źródło: Opracowanie własne.
    
Visual Studio Code
Kolejnym narzędziem niezbędnym do stworzenia całego oprogramowania jest platforma, na której w nieskomplikowany sposób można stworzyć widok i logikę dla stron internetowych. Mając na uwadze doświadczenia członków zespołu z poszczególnymi środowiskami, został wybrany Visual Studio Code. Środowisko programistyczne stworzyła rozpoznawalna firma Microsoft i jest w pełni darmowe(Warunki licencyjne oprogramowania Microsoft - Visual Studio Code, 
https://code.visualstudio.com/license (dostęp 11.12.2020)).


        Środowisko programistyczne Visual Studio Code. Źródło: Opracowanie własne.
    
Android Studio
Na rynku można znaleźć trzy główne środowiska, wspierające pisanie w platformie programistycznej Flutter. Wspomniane już wcześniej Visual Studio Code, jest doskonałym środowiskiem dla osób, które mają problemy ze zbyt dużym użyciem pamięci RAM w systemie operacyjnym Windows. Drugą propozycją jest Xcode zaprojektowany przez przedsiębiorstwo Apple Inc., jednak ta opcja jest jedynie dostępna dla osób posiadających sprzęt tejże firmy(Xcode12.2 – umowa licencyjna, https://apps.apple.com/pl/app/xcode/id497799835?l=pl (dostęp 11.12.2020)). Ostatnim środowiskiem, które ostatecznie zostało użyte w projekcie, jest Android Studio, korporacji JetBrains, oferujące głównie wsparcie dla natywnego pisania w języku Kotlin, bądź Java, jednak nie ma większych problemów ze wspieraniem języka Dart, po zaimplementowaniu odpowiednich wtyczek.


        Środowisko programistyczne Android Studio. Źródło: Opracowanie własne.
    
PG Admin
Koniecznym oprogramowaniem w projekcie, w którym została zaimplementowana baza danych typu PostgreSQL, jest kompatybilny z tą technologią program PG Admin(Materiały System Administration Portal, „PostgreSQL - pgAdmin”, https://pl.admininfo.info/postgresql-pgadmin (dostęp 11.12.2020)). Poprzez odpowiednie zintegrowanie środowiska, jest się w stanie w szybki sposób zarządzać bazą danych, śledzić poprawność zmian dokonanych przy pomocy serwera bądź sztywno dodawać, usuwać i edytować elementy, co często przyśpiesza pracę programisty. Pierwsza wersja PG Admina została wydana w 1998 roku, przez pgAdmin Development Team.

Postman
Drugorzędnym środowiskiem, które nie jest konieczne, jednak niezwykle usprawnia testowanie ostatnio wprowadzonych zmian w punktach końcowych, (ang. end-point) jest Postman. Narzędzie to gwarantuje nam w prosty sposób dostęp do takich zasobów jak: nagłówki, ciało wysyłanego żądania, czy również wspomaga wysyłanie całych plików na serwer. Nie można zapomnieć o zwrotnych informacjach, które oferuje platforma i są one wyświetlane w czytelny sposób. Postman został wydany w 2014 roku przez firmę Postman inc.


        Program wspomagający Postman. Źródło: Opracowanie własne.
    
Specyfikacja
Sekcja przedstawia informacje odnośnie instalacji poszczególnych komponentów, potrzebnych do uruchomienia stworzonego systemu oraz instrukcję obsługi części serwerowej, mobilnej i przeglądarkowej.

Instalacja i konfiguracja środowisk
Przed przystąpieniem do tworzenia aplikacji, należy pobrać odpowiednie środowiska dla poszczególnych części projektu tj. zaplecza, części webowej oraz aplikacji mobilnej, zwracając przy tym uwagę na wybieraną licencję.

InteliJ IDEA
Aby pobrać środowisko do pracy z kodem Java (Spring Boot), należy udać się na stronę: https://www.jetbrains.com/idea/download/section=windows, a następnie wybrać bezpłatną wersję społecznościową (ang. Community). Później należy przeprowadzić standardową instalację oprogramowania na aktualnym systemie operacyjnym. Po zakończeniu instalacji należy uruchomić środowisko, a następnie,
 w ustawieniach kompilatora, wskazać ścieżkę do folderu głównego Javy.

Visual Studio Code
Visual Studio Code można pobrać z oficjalnej strony producenta Microsoft:
https://code.visualstudio.com/. Jako że edytor nie posiada wbudowanych wtyczek do pracy ze środowiskiem Angular, należy wyszukać odpowiednie wtyczki
 w zakładce rozszerzeń. Do pracy z Angularem przydatne mogą być takie wtyczki jak np. zestaw Angular Extension Pack, czy rozszerzenia wspomagające debugowanie
 w przeglądarkach, np. Debugger for Chrome.

Android Studio
W celu zainstalowania środowiska Android Studio, należy udać się na stronę:
https://developer.android.com/studio, gdzie znajduje się odnośnik do najnowszej wersji programu. Po standardowej instalacji, opcjonalną rzeczą jest dodanie emulatora, czyli wirtualnego telefonu z systemem Android, symulującego zachowanie prawdziwego telefonu. W tym celu, z listy rozwijanej, w górnej części aplikacji, gdzie znajduje się informacja o braku dostępnych urządzeń, należy wybrać opcję AVD Manager. Następnie z dostępnych urządzeń należy wybrać jedno, przejść dalej, zdecydować która wersja Androida jest pożądana, ilość pamięci RAM, którą chcemy przeznaczyć dla emulatora i go zainstalować.

Postman
Narzędzie Postman można pobrać ze strony internetowej, znajdującej się pod adresem: https://www.postman.com/downloads/. Instalację należy przeprowadzić w sposób standardowy.

GitBash
Można pobrać oprogramowanie do systemu kontroli wersji. Jest to jednak opcjonalne, ponieważ jest ono wbudowane zarówno w Visual Studio Code, jak i Android Studio, czy InteliJ IDEA. Aby zainstalować program, należy pobrać plik instalacyjny ze strony producenta: https://git-scm.com/downloads. Po instalacji użytkownik dostaje dostęp do Git GUI oraz Git Bash, które służą do wykonywania poleceń git.

PostgreSQL
Do zainstalowania silnika baz danych PosgreSQL oraz narzędzia do zarządzania bazą wykonanych zapytań - pgAdmin4, należy odwiedzić stronę internetową:
https://www.enterprisedb.com/downloads/postgres-postgresql-downloads.
Następnie należy wybrać plik instalacyjny najnowszej wersji, zgodny z systemem operacyjnym, na którym program ma zostać zainstalowany. Podczas instalacji użytkownik powinien wybrać komponent opcjonalny pgAdmin4.

Po udanym pobraniu i zainstalowaniu należy przejść do folderu w którym serwer został umieszczony, a następnie wybieramy folder bin, z którego można utworzyć skrót do aplikacji pgAdmin4.exe na pulpicie.

Java
W celu zainstalowania Javy należy pobrać ją ze strony producenta:
https://www.java.com/pl/download/. Po przejściu przez standardową instalację, podczas której użytkownik powinien zdecydować, w którym miejscu chcemy zainstalować oprogramowanie, należy dodać je do zmiennych środowiskowych. W tym celu należy wybrać w Menu Start komponent Edytuj zmienne środowiskowe. Gdy pojawi się okienko, kolejnym krokiem jest przejście do zakładki Zaawansowane, po czym wybranie Zmienne środowiskowe.... Należy dodać nową zmienną o nazwie JAVAHOME, a jako wartość wpisać ścieżkę do folderu w którym Java została zainstalowana.

Node.js
Aby korzystać z platformy programistycznej Angular, niezbędne jest posiadanie środowiska node.js. W tym celu należy odwiedzić oficjalną stronę oprogramowania: https://nodejs.org/en/. Po pobraniu najnowszej wersji (zalecana jest wersja o długim wsparciu (ang. Long Time Support (LTS)) należy wywołać instalator
 i przejść standardową instalację. W celu weryfikacji prawidłowego przebiegu instalacji należy wpisać w wierszu poleceń następujące polecenia: node -v oraz npm -v. Jeżeli wszystko zostało poprawnie wykonane, zostanie zwrócony numer wersji.

Angular
W celu instalacji platformy programistycznej Angular należy uruchomić konsolę systemową i wykonać następujące polecenie: npm install -g @angular/cli.

Flutter
Aby móc korzystać z platformy programistycznej Flutter, podstawowym krokiem jest pobranie pliku .zip ze strony: https://flutter.dev/docs/get-started/install, a następnie wypakować go do rekomendowanej przez Google ścieżki 
C:srcflutter.

Kolejnym krokiem jest przejście do zmiennych środowiskowych. Dokładna instrukcja, jak tego dokonać znajduje się w punkcie 7.1.7. W tym miejscu, do zmiennej o nazwie Path należy dodać nową ścieżkę, która odpowiada miejscu zapisanego oprogramowania. Jeżeli wszystko przebiegło pomyślnie, po wpisaniu komendy flutter -version w wierszu poleceń, ukaże się informacja o wersji Fluttera. 

Instrukcja obsługi
W tej części podrozdziału zawarte są podstawowe informacje, które dotyczą instrukcji obsługi poszczególnych części projektowych.

Część serwerowa
Aby uruchomić serwer, należy posiadać na docelowym sprzęcie zainstalowany serwer bazodanowy PostgreSQL, a następnie uruchomić aplikację Hr-App.jar, która jest dostępna u twórców projektu. Gdy serwer się uruchomi, można bezproblemowo się z nim połączyć, o ile użytkownik używa tej samej sieci, w której się znajduje lub zmodyfikować ją, by była ogólnodostępna. Istnieje również możliwość produkcyjnego wystawienia serwera do sieci, przy pomocy np.: kontenera aplikacyjnego Apache Tomcat. W takim przypadku, wystarczy, że pliki aplikacji znajdą się w odpowiednim podfolderze Tomcata oraz że serwer jest uruchomiony.


Część internetowa
Aby uruchomić serwer, odpowiedzialny za dostęp użytkownika do strony internetowej, należy  otworzyć folder frontend w programie Microsoft Visual Studio Code i w konsoli wykonać komendę ng serve open, która spowoduje kompilację kodu i włączenie domyślnej przeglądarki internetowej, z otwartą zakładką aplikacji.
Istnieje również możliwość wdrożenia części internetowej aplikacji na serwer. Aby tego dokonać, należy analogicznie, lecz zamiast komendy ng serve open, użyć ng build, która spowoduje kompilację kodu i wygeneruje pliki, niezbędne do jej uruchomienia na serwerze własnego wyboru. Po udostępnieniu strony za pomocą własnego hostingu, można się z nią połączyć, wpisując w przeglądarce internetowej ustalony przez hosting adres.

Część mobilna

Aby korzystać z oprogramowania na swoim telefonie, należy na nim uruchomić otrzymany plik Hr-App.apk i zainstalować zawartość. Gdy wszystko przebiegnie pomyślnie, wyświetli się okno aplikacji. Po pojawieniu się okna logowania, należy się zarejestrować bądź zalogować. Następnie, po udanej autoryzacji, użytkownik zostanie przeniesiony do widoku głównego kontentu aplikacji.

Implementacja
Rozdział przedstawia najważniejsze informacje, które dotyczą implementacji projektu, z podziałem na część serwerową i kliencką, w postaci aplikacji mobilnej
 i przeglądarkowej.

Serwer
Część serwerowa odpowiada za obsługę bazy danych oraz działań użytkownika
 z nią związanych, takich jak np.: obsługa rozwiązywania quizów, zwracanie tabel, zabezpieczenia i inne. Najważniejsze cechy zaplecza, jak i pozostałych części aplikacji, zostały omówione w tym podrozdziale.

Specyfikacja bazy danych
Pomysł oraz budowa bazy danych zostały omówione w rozdziale 3.1. Samo tworzenie bazy danych obyło się bez tworzenia podzapytań SQL. Zapytania pisane ręcznie są wykorzystywane tylko w kilku specyficznych przypadkach, w których zapytanie JPASQL, z wykorzystaniem zapytań wbudowanych, było zbyt skomplikowane lub zbyt długie, co negatywnie wpływało na czytelność kodu. Zapytania Spring Data JPA umożliwiają tworzenie zapytań, które składają się z nazwy akcji, jak np.: find…By, count…By lub delete…By i nazwy pól encji. Przykładowo:
[language=Java,caption=Kod źródłowy wysyłający zapytanie do bazy o ilość nieodczytanych powiadomień dla działu HR danej firmy. Źródło: Opracowanie własne. ,captionpos=b]
    long countByReadAndFKhrAlertAnnouncementFKannouncement
         CompanyId(boolean read, long companyId);
zwróci liczbę powiadomień użytkownikowi działu HR, na podstawie tego, czy chce on zwrócić liczbę odczytanych czy nieodczytanych oraz na podstawie identyfikatora firmy.
Wszystkie zapytania znajdują się w repozytoriach, które zostały rozszerzone o klasę JpaRepository, umożliwiającą wykonywanie tego typu działań.
Natomiast, własne, natywne zapytanie wygląda w następujący sposób:


[caption=Natywne zapytanie do bazy danych w celu pobrania konkretnych informacji. Źródło: Opracowanie własne. ,captionpos=b]
    @Query(value = "SELECT * FROM Announcements announcement 
        JOIN Companies company " +
        "ON company.id = announcement.company_id " +
        "WHERE LOWER(announcement.title) 
        LIKE LOWER(CONCAT('
        "OR LOWER(announcement.description) 
        LIKE LOWER(CONCAT('
        "OR LOWER(company.name) 
        LIKE LOWER(CONCAT('
        "OR LOWER(company.about) 
        LIKE LOWER(CONCAT('
        "OR LOWER(company.location) 
        LIKE LOWER(CONCAT('
        nativeQuery = true
    )
List<AnnouncementsModel> findAnnouncementByAnything(
    String value);
W tym przypadku zostanie zwrócona lista ogłoszeń, na podstawie wpisanego ciągu znaków, który może zawierać się w: nazwie ogłoszenia, opisie ogłoszenia, nazwie firmy, opisie firmy lub lokalizacji firmy. Rozwiązanie to zostało wykorzystane
 w szybkiej wyszukiwarce ogłoszeń, na podstawie powyższych kryteriów.

Projekt bazy danych
W pierwszej kolejności, baza danych została zaprojektowana na kartce, następnie zespół przeszedł do implementacji struktury bazy danych poprzez tworzenie klas
 w projekcie oraz zależności pomiędzy tymi klasami. W dalszej kolejności, zostały wychwycone błędy z początkowej fazy projektu oraz naniesiono odpowiednie poprawki. Stworzenie struktur danych było pierwszym etapem początkowej fazy projektu.

Oprócz błędów związanych z logiką łączeń, zespół napotkał problem z tworzeniem zapytań JPA za pomocą metod wbudowanych. Metody te nie radzą sobie
 z tworzeniem zapytań w momencie, kiedy w nazwie kolumny znajduje się myślnik. Myślniki zostały zamienione na znaki podkreślenia.

Diagram związków encji


Na kolejnych stronach zostały przedstawione diagramy związków encji. Główny – zawierający całą strukturę bazy danych oraz dwa pomniejsze – zawierające wyszczególnione informacje, odnośnie najważniejszych tabel w bazie: kolejno testy
 i użytkownicy.


            Diagram związków encji. Źródło: Opracowanie własne.
    


            Diagram związków encji - tabela użytkowników. Źródło: Opracowanie własne.
    

            Diagram związków encji - tabela testów. Źródło: Opracowanie własne.
    
Spring Security i bcrypt
W projekcie zostały wykorzystane algorytmy szyfrujące, służące m.in. do zabezpieczenia haseł użytkowników. Został również zaimplementowany system autoryzacji użytkowników za pomocą JSON Web Tokenu.


    [Spring Security i JSON Web Token] – Spring Security dostarcza zbiór narzędzi, który pozwala na zabezpieczenie tworzonej aplikacji z wykorzystaniem gotowych mechanizmów. Dlatego, w prosty sposób i przy niskim nakładzie pracy programisty, można wykorzystać rozwiązania zaimplementowane w Spring Security do autoryzacji, w tym autoryzacji dwuetapowej, poprzez hashowanie danych, OAuth2, JWT, czy OpenID.    W projekcie, w celu autoryzacji użytkowników, został wykorzystany JSON Web Token.
    [language=Java,caption=Przykład danych w formacie JSON wysyłane przy logowaniu. Źródło: Opracowanie własne.,captionpos=b]
    
        "login": "x",
        "password": "y"
    
        Gdzie x i y to kolejno nazwa użytkownika i hasło, na punkt końcowy: /login, użytkownik w odpowiedzi dostaje nagłówek Authorization z zawartością w postaci Bearer token, gdzie token to token JWT. Zawiera on dane m.in.: o czasie jego przydatności, jak i o uprawnieniach użytkownika do wybranych zasobów. Następnie jest on doczepiany do nagłówków pozostałych zapytań REST(A. Rahmatulloh, „Performance comparison of signed algorithms on JSON Web Token”, 2019,  https://iopscience.iop.org/article/10.1088/1757-899X/550/1/012023/pdf,(dostęp 12.12.2020)). Bez tego, serwer nie jest w stanie stwierdzić, czy użytkownik posiada poświadczenia do wybranych zasobów. Jeżeli token okaże się nieprawidłowy, wygraśnie lub użytkownik spróbuje dostać się do zasobów, do których nie ma uprawnień, i zostanie zwrócony błąd http 403 – zabroniona wartość (ang. forbidden) – oznacza to, że serwer zrozumiał żądanie (czyli jest skonstruowane poprawnie), ale odmówił użytkownikowi dostępu
 do zasobów.
    Sama zawartość tokenu składa się z trzech części: nagłówku, właściwej zawartości (ang. payload) i podpisu. Każda z części jest łączona kropkami, a następnie szyfrowana. 
    
    
                        Graficzne przedstawienie budowy JSON Web Tokenu. Źródło: Opracowanie własne.
                
    Sekcja nagłówkowa składa się z dwóch części: zastosowanego algorytmu i typu tokenu. Zawartość jest kodowana za pomocą Base64. Druga część to właściwa zawartość, zawierająca roszczenie o dostęp, które zawiera dane użytkownika,
 w tym nazwę użytkownika i hasło. Ta część również szyfrowana jest w Base64. Trzecia część to sygnatura, zawierająca zakodowany nagłówek, zakodowany ładunek, sekretny klucz (który definiowany jest po stronie serwera), a także algorytm, który został zdefiniowany w nagłówku. W tym projekcie zastosowano algorytm kryptograficzny HMAC, używający RSA256(A. Michalczyk - Sekurak, „Kompendium bezpieczeństwa haseł – atak i obrona (część 1.)”, https://sekurak.pl/kompendium-bezpieczenstwa-hasel-atak-i-obrona/,(dostęp 12.12.2020)).
    
    
        
        Matematyczne przedstawienie tworzenia tokenu.
        
    [language=Java,caption=Budowa nagłówka JWT. Źródło: Opracowanie własne.,captionpos=b]
     "alg": "HS256", "typ": "JWT" 
    Gdzie alg to wykorzystany algorytm do szyfrowania.     
        [language=Java,caption=Właściwa zawartość tokenu. Źródło: Opracowanie własne. ,captionpos=b]
    
        "login": "user1",
        "iat": 1422779222,
        "password": 12345
    
    W części właściwej administrator systemu definiuje, jakie dane są przekazywane. Następnie dwie powyższe zawartości są szyfrowane w sygnaturze.
    
    [bcrypt] – w projekcie został wykorzystany, w celu bezpiecznego przechowywania haseł użytkowników w bazie danych, w postaci zaszyfrowanej.
    
    [caption=Sposób w jaki jest zapisywany ciąg bcrypt. Źródło: Opracowanie własne.,captionpos=b]
[identyfikator algorytmu][koszt][22 znaki soli]
[31 znaków hashu]
        Na przykład:
    [caption=Przykładowy ciąg bcrypt. Źródło: Opracowanie własne.,captionpos=b]
104x4nn4x4AnswerResultDtoFromJson(json);

        Map<String, dynamic> toJson() => 
            _options.path');
      String token = await TokenSharedPref.getToken();
      if (token == null) 
        _apiClient.clear();
        _apiClient.unlock();
        _logoutSubject.add(null);
        return options;
      
      _apiClient.unlock();
      return options..headers['Authorization'] = 'response.statusCode) - 
    error.request.path)', error.error);
  if(await TokenSharedPref.tokenExpired()) 
    logoutCurrentUser();
  
  return error;

Interfejs użytkownika

Po pierwszym uruchomieniu aplikacji oczom użytkownika ukaże się ekran logowania i rejestracji. Został on zaprojektowany w taki sposób, aby użytkownik był informowany na bieżąco o błędach występujących w formularzu. Przykładowo, jeżeli przy rejestracji wpisze e-mail, który nie jest prawidłowy, aplikacja wyświetli odpowiedni komunikat, informujący go o tym.




Ekran logowania i rejestracji. Źródło: Opracowanie własne.
Po zalogowaniu, aplikacja pozwala na wyszukiwanie dostępnych ogłoszeń pracy. Wybranie jednego z ogłoszeń przeniesie do widoku jego szczegółów, gdzie można wysłać swoją kandydaturę na ogłaszane stanowiska. Prośba ta, wraz z danymi użytkownika, zostanie skierowana do pracownika działu zarządzania zasobami ludzkimi i zweryfikowana. 




Widok ogłoszeń wraz ze szczegółami danego ogłoszenia. Źródło: Opracowanie własne.
Zakładka rozwiązywania testów ukazuje okno, w którym można wpisać kod do testu, który użytkownik planuje wykonać, a który wcześniej został mu przypisany. 




Widok ogłoszeń wraz ze szczegółami danego ogłoszenia. Źródło: Opracowanie własne.
Gdy użytkownik zdecyduje się, by podjąć wyzwanie, jego oczom ukaże się widok testu. Po wybraniu odpowiedzi, aplikacja wyśle ją na serwer, a następnie pobierze
 i ukaże następne pytanie. Każdy numer pytania, na które użytkownik udzielił odpowiedzi, zostanie w górnej części zaznaczony na czerwono. Osoba, rozwiązująca test, widzi w dolnej części aplikacji pozostały czas na rozwiązanie go oraz ma możliwość jego zakończenia przed czasem. Jeżeli wystąpi błąd podczas rozwiązywania testów w aplikacji, widok zostanie zamknięty, a użytkownik o tym fakcie poinformowany. Zawsze istnieje możliwość wrócenia do rozwiązywania, o ile czas na rozwiązywanie się nie zakończył.




Widok rozwiązywania testu. Źródło: Opracowanie własne.
Ostatnia zakładka dotyczy obsługi konta użytkownika. Są tutaj dostępne opcje, takie jak: wylogowanie, zmiana hasła i maila, dodanie życiorysu, czy dostęp do powiadomień o dostępie do nowego testu.




Wszystkie dostępne opcje w menu użytkownika. Źródło: Opracowanie własne.
W zakładce Moje konto użytkownik jest w stanie sprawdzić swoje podstawowe dane, jakimi są: e-mail, numer telefonu, a także - po kliknięciu w odpowiednią ikonę - pobrać dodany wcześniej życiorys w formacie .pdf.




Zakładka zawierająca dane użytkownika. Źródło: Opracowanie własne.
Rysunek  przedstawia widok dla zmiany jednej z informacji o użytkowniku. Na zrzucie ekranu można zauważyć komunikat z serwera, który informuje o podaniu błędnego hasła, przez co e-mail użytkownika nie został zmieniony. Dla przykładu, widok dla zmiany hasła jest zbudowany analogicznie do widoku przedstawionego na rysunku .




Zakładka do obsługi zmiany e-maila. Źródło: Opracowanie własne.
Ostatni kontener w tym podmenu zawiera opcję do wysłania nowego lub podmiany obecnego życiorysu. Wystarczy wybrać z urządzenia odpowiedni plik, a następnie wybrać opcję: Wysyłanie CV. 




Widok zakładki, w której można wysłać życiorys. Źródło: Opracowanie własne.
W menu powiadomień została zaprezentowana lista wszystkich powiadomień użytkownika. Po wybraniu któregoś z nich, użytkownik widzi szczegóły ogłoszenia, do którego dostał dostęp, jak również kod testu. Nie musi on jednak przepisywać go we właściwe pole. Wystarczy wcisnąć przycisk, na którym znajduje się ów kod, a aplikacja sama przeniesie go do rozwiązywania quizu.




Widok szczegółów powiadomienia wraz z kodem testu. Źródło: Opracowanie własne.

W powyższym rozdziale skupiono uwagę na poszczególnych komponentach, zastosowanych w różnych gałęziach projektu. Każda z części, czy to serwerowa, czy kliencka, została napisana z myślą o prostocie użytkowania, jak również przygotowano ją na ewentualne zmiany, bądź samą rozbudowę. Wszystko to zostało wsparte odpowiednimi zabezpieczeniami, takimi jak Spring Security, czy JWT. W celu usprawnienia całego działania projektu i szybszej implementacji, zespół korzystał
 z odpowiednich darmowych bibliotek, jak na przykład retrofit, która wspomaga programistę przy wysyłaniu zapytań do serwera, a także sprawia, że sam kod jest dużo bardziej czytelny. Po stronie klienta poszczególne elementy widoku są wspomagane przez rozszerzenia zgodne z Material Design, co powoduje, że strona jest wizualnie przyjazna użytkownikowi. W każdym fragmencie omawiane zagadnienia zostały poparte przykładami wizualnymi, którymi były na przykład zrzuty ekranu aplikacji webowej lub mobilnej, jak również wycinki z fragmentami kodu źródłowego wraz
 z wyjaśnieniem, na czym polega jego działanie.

Testy
Testowanie aplikacji w fazie jej produkcji i rozwoju, należy do bardzo ważnego punktu procesu wytwarzania programowania. Dobrze prowadzony projekt wymaga testów w każdej z faz produkcji. W aplikacji projektowej, poza standardowymi manualnymi testami np.: części przeglądarkowej – w których sprawdzane było, czy wywołując odpowiednie zdarzenia, otrzymujemy oczekiwany wynik; czy też części bazodanowo-serwerowej, gdzie podczas procesu tworzenia punktów końcowych, osoby odpowiedzialne za kod programu sprawdzały, czy działa on poprawnie. Jednak poprzestanie na tego typu testach nie należy do dobrych praktyk, ponieważ osoba programująca daną funkcjonalność może nie zauważyć błędów, które popełniła
 w trakcie tworzenia logiki działania aplikacji. W tym celu, w każdej z części produktu, zespół postanowił stworzyć testy jednostkowe, automatycznie sprawdzające poprawność działania ważniejszych funkcjonalności.

Testy części serwerowej
Część serwerowa powinna sprawdzać na przykład, czy wybrane punkty końcowe zwracają dane w odpowiednim formacie. Poniższy test sprawdza, czy lista wszystkich użytkowników jest tablicą oraz czy wybrane pola w niej są odpowiedniego typu.
[language=Java,caption=Testy jednostkowe aplikacji przeglądarkowej. Źródło: Opracowanie własne.,captionpos=b]
@EnableWebMvc
@RunWith(SpringRunner.class)
@SpringBootTest
public class UsersListTest 

    @Autowired
    private WebApplicationContext context;
    private MockMvc mvc;

    @Before
    public void setup() 
        mvc = MockMvcBuilders
                .webAppContextSetup(context)
                .apply(SecurityMockMvcConfigurers
                .springSecurity()).build();
    

    @WithMockUser(value = "test123", password = "test")
    @Test
    public void checkTypeInUsersList() throws Exception 
        this.mvc.perform(get("/user/getall"))
            .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers
                .jsonPath(".[0].firstName", Is.isA(String.class)))
                .andExpect(MockMvcResultMatchers.jsonPath(
                "